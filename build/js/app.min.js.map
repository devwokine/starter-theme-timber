{"version":3,"file":"app.min.js","sources":["assets/js/utils.js","assets/js/pages/home.js","assets/js/pages/page.js","../node_modules/fastclick/lib/fastclick.js","assets/js/modules/header.js","assets/js/app.js"],"sourcesContent":["export function onLoadedMetadata(e) {\n\n  const video = $(e.target);\n  let aspectRatio = video.data('aspectRatio');\n  if (aspectRatio == undefined) {\n      aspectRatio = video.width() / video.height();\n      video.data('aspectRatio', aspectRatio);\n  }\n  resizeVideo(video);\n\n}\n\nexport function resizeVideo(video) {\n\n  let newWidth;\n  let newHeight;\n  let videoRatio = video.data('aspectRatio');\n  if (videoRatio == undefined) videoRatio = 1.7777777;\n  let parentWidth  = video.parent().width();\n  let parentHeight = video.parent().height();\n  let parentRatio = parentWidth / parentHeight;\n\n  if (parentRatio > videoRatio && !video.hasClass('bgWidth')) {\n    video.removeClass(\"bgHeight\");\n    video.addClass(\"bgWidth\");\n  }\n  if (parentRatio <= videoRatio && !video.hasClass('bgHeight')) {\n    video.removeClass(\"bgWidth\");\n    video.addClass(\"bgHeight\");\n  }\n\n}\n\nexport function delay(ms){\n    var ctr, rej, p = new Promise(function (resolve, reject) {\n        ctr = setTimeout(resolve, ms);\n        rej = reject;\n    });\n    p.cancel = function(){ clearTimeout(ctr); rej(Error(\"Cancelled\"))};\n    return p;\n}\n\nexport function randomInt(min,max)Â {\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\nexport function normalize(value, min, max) {\n  return (value - min) / (max - min);\n}\n\nexport function clamp(value, min, max) {\n  return value < min ? min : (value > max ? max : value);\n}\n\nexport function simulateClick(elem) {\n\n    var evt = new MouseEvent('click', {\n        bubbles: true,\n        cancelable: true,\n        view: window\n    });\n\n    var canceled = !elem.dispatchEvent(evt);\n\n};\n\nexport function mouseMovefn(e) {\n\n  let xMouse = e.pageX - e.currentTarget.getBoundingClientRect().left - ( e.currentTarget.offsetWidth / 2 );\n  let yMouse = e.pageY - window.pageYOffset - e.currentTarget.getBoundingClientRect().top - ( e.currentTarget.offsetHeight / 2 );\n  const mouseElements = e.currentTarget.querySelectorAll('*[data-mouse-parallax]');\n  mouseElements.forEach(elem => {\n    var factor = elem.getAttribute('data-mouse-parallax');\n    let xFinal = xMouse * factor;\n    let yFinal = yMouse * factor;\n    TweenMax.to(elem, 1.2, {x:xFinal, y:yFinal});\n  });\n\n}\n","export function initHome() {\n\n\tvar Home = Barba.BaseView.extend({\n\n\t\tnamespace: 'page-home',\n\n\t\tonEnter: function() {\n\n\t\t\t//console.log('Init Home');\n\n\t\t},\n\n\t\tonLeaveCompleted: function() {\n\n\n\n\t\t}\n\n\t})\n\n\tHome.init();\n\n}\n","export function initPage() {\n\n\tvar Page = Barba.BaseView.extend({\n\n\t\tnamespace: 'page',\n\n\t\tonEnter: function() {\n\n\t\t\t//console.log('Init Page');\n\n\t\t},\n\n\t\tonLeaveCompleted: function() {\n\n\n\n\t\t}\n\n\t})\n\n\tPage.init();\n\n}\n",";(function () {\n\t'use strict';\n\n\t/**\n\t * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.\n\t *\n\t * @codingstandard ftlabs-jsv2\n\t * @copyright The Financial Times Limited [All Rights Reserved]\n\t * @license MIT License (see LICENSE.txt)\n\t */\n\n\t/*jslint browser:true, node:true*/\n\t/*global define, Event, Node*/\n\n\n\t/**\n\t * Instantiate fast-clicking listeners on the specified layer.\n\t *\n\t * @constructor\n\t * @param {Element} layer The layer to listen on\n\t * @param {Object} [options={}] The options to override the defaults\n\t */\n\tfunction FastClick(layer, options) {\n\t\tvar oldOnClick;\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Whether a click is currently being tracked.\n\t\t *\n\t\t * @type boolean\n\t\t */\n\t\tthis.trackingClick = false;\n\n\n\t\t/**\n\t\t * Timestamp for when click tracking started.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.trackingClickStart = 0;\n\n\n\t\t/**\n\t\t * The element being tracked for a click.\n\t\t *\n\t\t * @type EventTarget\n\t\t */\n\t\tthis.targetElement = null;\n\n\n\t\t/**\n\t\t * X-coordinate of touch start event.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchStartX = 0;\n\n\n\t\t/**\n\t\t * Y-coordinate of touch start event.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchStartY = 0;\n\n\n\t\t/**\n\t\t * ID of the last touch, retrieved from Touch.identifier.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.lastTouchIdentifier = 0;\n\n\n\t\t/**\n\t\t * Touchmove boundary, beyond which a click will be cancelled.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchBoundary = options.touchBoundary || 10;\n\n\n\t\t/**\n\t\t * The FastClick layer.\n\t\t *\n\t\t * @type Element\n\t\t */\n\t\tthis.layer = layer;\n\n\t\t/**\n\t\t * The minimum time between tap(touchstart and touchend) events\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.tapDelay = options.tapDelay || 200;\n\n\t\t/**\n\t\t * The maximum time for a tap\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.tapTimeout = options.tapTimeout || 700;\n\n\t\tif (FastClick.notNeeded(layer)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Some old versions of Android don't have Function.prototype.bind\n\t\tfunction bind(method, context) {\n\t\t\treturn function() { return method.apply(context, arguments); };\n\t\t}\n\n\n\t\tvar methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];\n\t\tvar context = this;\n\t\tfor (var i = 0, l = methods.length; i < l; i++) {\n\t\t\tcontext[methods[i]] = bind(context[methods[i]], context);\n\t\t}\n\n\t\t// Set up event handlers as required\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.addEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.addEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.addEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.addEventListener('click', this.onClick, true);\n\t\tlayer.addEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.addEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.addEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.addEventListener('touchcancel', this.onTouchCancel, false);\n\n\t\t// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick\n\t\t// layer when they are cancelled.\n\t\tif (!Event.prototype.stopImmediatePropagation) {\n\t\t\tlayer.removeEventListener = function(type, callback, capture) {\n\t\t\t\tvar rmv = Node.prototype.removeEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\trmv.call(layer, type, callback.hijacked || callback, capture);\n\t\t\t\t} else {\n\t\t\t\t\trmv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlayer.addEventListener = function(type, callback, capture) {\n\t\t\t\tvar adv = Node.prototype.addEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\tadv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {\n\t\t\t\t\t\tif (!event.propagationStopped) {\n\t\t\t\t\t\t\tcallback(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}), capture);\n\t\t\t\t} else {\n\t\t\t\t\tadv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// If a handler is already declared in the element's onclick attribute, it will be fired before\n\t\t// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and\n\t\t// adding it as listener.\n\t\tif (typeof layer.onclick === 'function') {\n\n\t\t\t// Android browser on at least 3.2 requires a new reference to the function in layer.onclick\n\t\t\t// - the old one won't work if passed to addEventListener directly.\n\t\t\toldOnClick = layer.onclick;\n\t\t\tlayer.addEventListener('click', function(event) {\n\t\t\t\toldOnClick(event);\n\t\t\t}, false);\n\t\t\tlayer.onclick = null;\n\t\t}\n\t}\n\n\t/**\n\t* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.\n\t*\n\t* @type boolean\n\t*/\n\tvar deviceIsWindowsPhone = navigator.userAgent.indexOf(\"Windows Phone\") >= 0;\n\n\t/**\n\t * Android requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;\n\n\n\t/**\n\t * iOS requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;\n\n\n\t/**\n\t * iOS 4 requires an exception for select elements.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOS4 = deviceIsIOS && (/OS 4_\\d(_\\d)?/).test(navigator.userAgent);\n\n\n\t/**\n\t * iOS 6.0-7.* requires the target element to be manually derived\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\\d/).test(navigator.userAgent);\n\n\t/**\n\t * BlackBerry requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;\n\n\t/**\n\t * Determine whether a given element requires a native click.\n\t *\n\t * @param {EventTarget|Element} target Target DOM element\n\t * @returns {boolean} Returns true if the element needs a native click\n\t */\n\tFastClick.prototype.needsClick = function(target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\n\t\t// Don't send a synthetic click to disabled inputs (issue #62)\n\t\tcase 'button':\n\t\tcase 'select':\n\t\tcase 'textarea':\n\t\t\tif (target.disabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'input':\n\n\t\t\t// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)\n\t\t\tif ((deviceIsIOS && target.type === 'file') || target.disabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'label':\n\t\tcase 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames\n\t\tcase 'video':\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (/\\bneedsclick\\b/).test(target.className);\n\t};\n\n\n\t/**\n\t * Determine whether a given element requires a call to focus to simulate click into element.\n\t *\n\t * @param {EventTarget|Element} target Target DOM element\n\t * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.\n\t */\n\tFastClick.prototype.needsFocus = function(target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\t\tcase 'textarea':\n\t\t\treturn true;\n\t\tcase 'select':\n\t\t\treturn !deviceIsAndroid;\n\t\tcase 'input':\n\t\t\tswitch (target.type) {\n\t\t\tcase 'button':\n\t\t\tcase 'checkbox':\n\t\t\tcase 'file':\n\t\t\tcase 'image':\n\t\t\tcase 'radio':\n\t\t\tcase 'submit':\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// No point in attempting to focus disabled inputs\n\t\t\treturn !target.disabled && !target.readOnly;\n\t\tdefault:\n\t\t\treturn (/\\bneedsfocus\\b/).test(target.className);\n\t\t}\n\t};\n\n\n\t/**\n\t * Send a click event to the specified element.\n\t *\n\t * @param {EventTarget|Element} targetElement\n\t * @param {Event} event\n\t */\n\tFastClick.prototype.sendClick = function(targetElement, event) {\n\t\tvar clickEvent, touch;\n\n\t\t// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)\n\t\tif (document.activeElement && document.activeElement !== targetElement) {\n\t\t\tdocument.activeElement.blur();\n\t\t}\n\n\t\ttouch = event.changedTouches[0];\n\n\t\t// Synthesise a click event, with an extra attribute so it can be tracked\n\t\tclickEvent = document.createEvent('MouseEvents');\n\t\tclickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n\t\tclickEvent.forwardedTouchEvent = true;\n\t\ttargetElement.dispatchEvent(clickEvent);\n\t};\n\n\tFastClick.prototype.determineEventType = function(targetElement) {\n\n\t\t//Issue #159: Android Chrome Select Box does not open with a synthetic click event\n\t\tif (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {\n\t\t\treturn 'mousedown';\n\t\t}\n\n\t\treturn 'click';\n\t};\n\n\n\t/**\n\t * @param {EventTarget|Element} targetElement\n\t */\n\tFastClick.prototype.focus = function(targetElement) {\n\t\tvar length;\n\n\t\t// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.\n\t\tif (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {\n\t\t\tlength = targetElement.value.length;\n\t\t\ttargetElement.setSelectionRange(length, length);\n\t\t} else {\n\t\t\ttargetElement.focus();\n\t\t}\n\t};\n\n\n\t/**\n\t * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.\n\t *\n\t * @param {EventTarget|Element} targetElement\n\t */\n\tFastClick.prototype.updateScrollParent = function(targetElement) {\n\t\tvar scrollParent, parentElement;\n\n\t\tscrollParent = targetElement.fastClickScrollParent;\n\n\t\t// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the\n\t\t// target element was moved to another parent.\n\t\tif (!scrollParent || !scrollParent.contains(targetElement)) {\n\t\t\tparentElement = targetElement;\n\t\t\tdo {\n\t\t\t\tif (parentElement.scrollHeight > parentElement.offsetHeight) {\n\t\t\t\t\tscrollParent = parentElement;\n\t\t\t\t\ttargetElement.fastClickScrollParent = parentElement;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tparentElement = parentElement.parentElement;\n\t\t\t} while (parentElement);\n\t\t}\n\n\t\t// Always update the scroll top tracker if possible.\n\t\tif (scrollParent) {\n\t\t\tscrollParent.fastClickLastScrollTop = scrollParent.scrollTop;\n\t\t}\n\t};\n\n\n\t/**\n\t * @param {EventTarget} targetElement\n\t * @returns {Element|EventTarget}\n\t */\n\tFastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {\n\n\t\t// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.\n\t\tif (eventTarget.nodeType === Node.TEXT_NODE) {\n\t\t\treturn eventTarget.parentNode;\n\t\t}\n\n\t\treturn eventTarget;\n\t};\n\n\n\t/**\n\t * On touch start, record the position and scroll offset.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchStart = function(event) {\n\t\tvar targetElement, touch, selection;\n\n\t\t// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).\n\t\tif (event.targetTouches.length > 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttargetElement = this.getTargetElementFromEventTarget(event.target);\n\t\ttouch = event.targetTouches[0];\n\n\t\tif (deviceIsIOS) {\n\n\t\t\t// Only trusted events will deselect text on iOS (issue #49)\n\t\t\tselection = window.getSelection();\n\t\t\tif (selection.rangeCount && !selection.isCollapsed) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!deviceIsIOS4) {\n\n\t\t\t\t// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):\n\t\t\t\t// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched\n\t\t\t\t// with the same identifier as the touch event that previously triggered the click that triggered the alert.\n\t\t\t\t// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an\n\t\t\t\t// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.\n\t\t\t\t// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,\n\t\t\t\t// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,\n\t\t\t\t// random integers, it's safe to to continue if the identifier is 0 here.\n\t\t\t\tif (touch.identifier && touch.identifier === this.lastTouchIdentifier) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tthis.lastTouchIdentifier = touch.identifier;\n\n\t\t\t\t// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:\n\t\t\t\t// 1) the user does a fling scroll on the scrollable layer\n\t\t\t\t// 2) the user stops the fling scroll with another tap\n\t\t\t\t// then the event.target of the last 'touchend' event will be the element that was under the user's finger\n\t\t\t\t// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check\n\t\t\t\t// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).\n\t\t\t\tthis.updateScrollParent(targetElement);\n\t\t\t}\n\t\t}\n\n\t\tthis.trackingClick = true;\n\t\tthis.trackingClickStart = event.timeStamp;\n\t\tthis.targetElement = targetElement;\n\n\t\tthis.touchStartX = touch.pageX;\n\t\tthis.touchStartY = touch.pageY;\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.touchHasMoved = function(event) {\n\t\tvar touch = event.changedTouches[0], boundary = this.touchBoundary;\n\n\t\tif (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Update the last position.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchMove = function(event) {\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the touch has moved, cancel the click tracking\n\t\tif (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {\n\t\t\tthis.trackingClick = false;\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Attempt to find the labelled control for the given label element.\n\t *\n\t * @param {EventTarget|HTMLLabelElement} labelElement\n\t * @returns {Element|null}\n\t */\n\tFastClick.prototype.findControl = function(labelElement) {\n\n\t\t// Fast path for newer browsers supporting the HTML5 control attribute\n\t\tif (labelElement.control !== undefined) {\n\t\t\treturn labelElement.control;\n\t\t}\n\n\t\t// All browsers under test that support touch events also support the HTML5 htmlFor attribute\n\t\tif (labelElement.htmlFor) {\n\t\t\treturn document.getElementById(labelElement.htmlFor);\n\t\t}\n\n\t\t// If no for attribute exists, attempt to retrieve the first labellable descendant element\n\t\t// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label\n\t\treturn labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');\n\t};\n\n\n\t/**\n\t * On touch end, determine whether to send a click event at once.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchEnd = function(event) {\n\t\tvar forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;\n\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {\n\t\t\tthis.cancelNextClick = true;\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Reset to prevent wrong click cancel on input (issue #156).\n\t\tthis.cancelNextClick = false;\n\n\t\tthis.lastClickTime = event.timeStamp;\n\n\t\ttrackingClickStart = this.trackingClickStart;\n\t\tthis.trackingClick = false;\n\t\tthis.trackingClickStart = 0;\n\n\t\t// On some iOS devices, the targetElement supplied with the event is invalid if the layer\n\t\t// is performing a transition or scroll, and has to be re-detected manually. Note that\n\t\t// for this to function correctly, it must be called *after* the event target is checked!\n\t\t// See issue #57; also filed as rdar://13048589 .\n\t\tif (deviceIsIOSWithBadTarget) {\n\t\t\ttouch = event.changedTouches[0];\n\n\t\t\t// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null\n\t\t\ttargetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;\n\t\t\ttargetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;\n\t\t}\n\n\t\ttargetTagName = targetElement.tagName.toLowerCase();\n\t\tif (targetTagName === 'label') {\n\t\t\tforElement = this.findControl(targetElement);\n\t\t\tif (forElement) {\n\t\t\t\tthis.focus(targetElement);\n\t\t\t\tif (deviceIsAndroid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\ttargetElement = forElement;\n\t\t\t}\n\t\t} else if (this.needsFocus(targetElement)) {\n\n\t\t\t// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.\n\t\t\t// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).\n\t\t\tif ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.focus(targetElement);\n\t\t\tthis.sendClick(targetElement, event);\n\n\t\t\t// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.\n\t\t\t// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)\n\t\t\tif (!deviceIsIOS || targetTagName !== 'select') {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (deviceIsIOS && !deviceIsIOS4) {\n\n\t\t\t// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled\n\t\t\t// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).\n\t\t\tscrollParent = targetElement.fastClickScrollParent;\n\t\t\tif (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent the actual click from going though - unless the target node is marked as requiring\n\t\t// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.\n\t\tif (!this.needsClick(targetElement)) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.sendClick(targetElement, event);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * On touch cancel, stop tracking the click.\n\t *\n\t * @returns {void}\n\t */\n\tFastClick.prototype.onTouchCancel = function() {\n\t\tthis.trackingClick = false;\n\t\tthis.targetElement = null;\n\t};\n\n\n\t/**\n\t * Determine mouse events which should be permitted.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onMouse = function(event) {\n\n\t\t// If a target element was never set (because a touch event was never fired) allow the event\n\t\tif (!this.targetElement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (event.forwardedTouchEvent) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Programmatically generated events targeting a specific element should be permitted\n\t\tif (!event.cancelable) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Derive and check the target element to see whether the mouse event needs to be permitted;\n\t\t// unless explicitly enabled, prevent non-touch click events from triggering actions,\n\t\t// to prevent ghost/doubleclicks.\n\t\tif (!this.needsClick(this.targetElement) || this.cancelNextClick) {\n\n\t\t\t// Prevent any user-added listeners declared on FastClick element from being fired.\n\t\t\tif (event.stopImmediatePropagation) {\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} else {\n\n\t\t\t\t// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t\t\tevent.propagationStopped = true;\n\t\t\t}\n\n\t\t\t// Cancel the event\n\t\t\tevent.stopPropagation();\n\t\t\tevent.preventDefault();\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the mouse event is permitted, return true for the action to go through.\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * On actual clicks, determine whether this is a touch-generated click, a click action occurring\n\t * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or\n\t * an actual click which should be permitted.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onClick = function(event) {\n\t\tvar permitted;\n\n\t\t// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.\n\t\tif (this.trackingClick) {\n\t\t\tthis.targetElement = null;\n\t\t\tthis.trackingClick = false;\n\t\t\treturn true;\n\t\t}\n\n\t\t// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.\n\t\tif (event.target.type === 'submit' && event.detail === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tpermitted = this.onMouse(event);\n\n\t\t// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.\n\t\tif (!permitted) {\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\t// If clicks are permitted, return true for the action to go through.\n\t\treturn permitted;\n\t};\n\n\n\t/**\n\t * Remove all FastClick's event listeners.\n\t *\n\t * @returns {void}\n\t */\n\tFastClick.prototype.destroy = function() {\n\t\tvar layer = this.layer;\n\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.removeEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.removeEventListener('click', this.onClick, true);\n\t\tlayer.removeEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.removeEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.removeEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.removeEventListener('touchcancel', this.onTouchCancel, false);\n\t};\n\n\n\t/**\n\t * Check whether FastClick is needed.\n\t *\n\t * @param {Element} layer The layer to listen on\n\t */\n\tFastClick.notNeeded = function(layer) {\n\t\tvar metaViewport;\n\t\tvar chromeVersion;\n\t\tvar blackberryVersion;\n\t\tvar firefoxVersion;\n\n\t\t// Devices that don't support touch don't need FastClick\n\t\tif (typeof window.ontouchstart === 'undefined') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Chrome version - zero for other browsers\n\t\tchromeVersion = +(/Chrome\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];\n\n\t\tif (chromeVersion) {\n\n\t\t\tif (deviceIsAndroid) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// Chrome on Android with user-scalable=\"no\" doesn't need FastClick (issue #89)\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Chrome 32 and above with width=device-width or less don't need FastClick\n\t\t\t\t\tif (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Chrome desktop doesn't need FastClick (issue #15)\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (deviceIsBlackBerry10) {\n\t\t\tblackberryVersion = navigator.userAgent.match(/Version\\/([0-9]*)\\.([0-9]*)/);\n\n\t\t\t// BlackBerry 10.3+ does not require Fastclick library.\n\t\t\t// https://github.com/ftlabs/fastclick/issues/251\n\t\t\tif (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// user-scalable=no eliminates click delay.\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// width=device-width (or less than device-width) eliminates click delay.\n\t\t\t\t\tif (document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)\n\t\tif (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Firefox version - zero for other browsers\n\t\tfirefoxVersion = +(/Firefox\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];\n\n\t\tif (firefoxVersion >= 27) {\n\t\t\t// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896\n\n\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\t\t\tif (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version\n\t\t// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx\n\t\tif (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Factory method for creating a FastClick object\n\t *\n\t * @param {Element} layer The layer to listen on\n\t * @param {Object} [options={}] The options to override the defaults\n\t */\n\tFastClick.attach = function(layer, options) {\n\t\treturn new FastClick(layer, options);\n\t};\n\n\n\tif (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine(function() {\n\t\t\treturn FastClick;\n\t\t});\n\t} else if (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = FastClick.attach;\n\t\tmodule.exports.FastClick = FastClick;\n\t} else {\n\t\twindow.FastClick = FastClick;\n\t}\n}());\n","import * as utils from '../utils.js';\n\nclass Header {\n\n  constructor(el) {\n\n    //console.log('initHeader');\n\n\t  this.DOM = {};\n\t  this.DOM.el = el;\n\t  this.DOM.body = document.body;\n\t  this.DOM.brand = this.DOM.el.querySelector('.brand');\n    this.DOM.toggleOpen = this.DOM.el.querySelector('.toggle__menu__open');\n\t  this.DOM.toggleClose = this.DOM.el.querySelector('.toggle__menu__close');\n    this.DOM.menuContainer = this.DOM.el.querySelector('nav');\n    this.menuOpen = false;\n\n\t  this.init();\n\n  }\n\n  init() {\n\n    //animation Open\n    const menuOpenTL = new TimelineMax({ paused: true});\n\n  \t//toggle\n  \tthis.DOM.toggleOpen.addEventListener('click',(e) => {\n\n  \t\te.preventDefault();\n  \t\tthis.DOM.body.classList.toggle('showMenu');\n\n      //if Openning\n  \t\tif ( this.DOM.body.classList.contains('showMenu') ) {\n\n        this.menuOpen = true;\n        this.DOM.body.style.overflow = \"hidden\";\n        this.DOM.menuContainer.style.visibility = \"visible\";\n\n        //Animation\n        menuOpenTL.totalDuration(2).restart();\n\n  \t\t} else {\n\n        this.menuOpen = false;\n\n        //Animation Reverse\n        menuOpenTL.totalDuration(1).reverse();\n\n        this.DOM.body.style.overflow = \"auto\";\n        this.DOM.menuContainer.style.visibility = \"hidden\";\n\n  \t\t}\n\n  \t});\n\n    //toggle\n    this.DOM.toggleClose.addEventListener('click',(e) => {\n\n      e.preventDefault();\n      this.DOM.body.classList.toggle('showMenu');\n\n      //if Openning\n      if ( this.DOM.body.classList.contains('showMenu') ) {\n\n        this.menuOpen = true;\n        this.DOM.body.style.overflow = \"hidden\";\n        this.DOM.menuContainer.style.visibility = \"visible\";\n\n        //Animation\n        menuOpenTL.totalDuration(2).restart();\n\n      } else {\n\n        this.menuOpen = false;\n\n        //Animation Reverse\n        menuOpenTL.totalDuration(1).reverse();\n\n        this.DOM.body.style.overflow = \"auto\";\n        this.DOM.menuContainer.style.visibility = \"hidden\";\n\n      }\n\n    });\n\n\n    // Links Click\n    const links = this.DOM.menuContainer.querySelectorAll('.nav__link')\n    links.forEach((elem) => {\n\n      elem.addEventListener('click',(e)=> {\n        if ( this.DOM.menuContainer.querySelector('.active') != null ) {\n           this.DOM.menuContainer.querySelector('.active').classList.remove('active');\n        }\n        e.currentTarget.parentNode.classList.add('active');\n      })\n\n    });\n\n    // Brand Click\n    this.DOM.brand.addEventListener('click',(e)=> {\n\n      if ( this.DOM.menuContainer.querySelector('.active') != null ) {\n         this.DOM.menuContainer.querySelector('.active').classList.remove('active');\n      }\n\n    })\n\n  }\n\n}\n\nexport default Header;\n","import 'nodelist-foreach-polyfill'\nimport FastClick from 'fastclick';\nimport * as utils from './utils.js';\n\nimport Header from './modules/header.js';\n\nimport {initHome} from './pages/home.js';\nimport {initPage} from './pages/page.js';\n\nclass App {\n\n  constructor(opt = {}) {\n\n    //Declarations\n    this.sy = 0;\n    this.devMode = true;\n    this.DOM = {};\n    this.DOM.body = document.body;\n    this.DOM.footer = document.querySelector('footer');\n    this.DOM.barbaWrapper = document.querySelector('#barba-wrapper');\n\n    //Signature Wokine\n    window.scrollTo(0,0)\n    console.log(\"%cCreated by Wokine, with â¤\",\"color: #000; padding: 5px 0px 1px; border-bottom:2px solid #71d1c2;\"),console.log(\"%chttp://wokine.com\",\"color:#ccc\")\n\n    this.init();\n    this.addEvents();\n    this.intro();\n\n  }\n\n  init() {\n\n    //DevMode ( infos navigateur )\n    if (this.devMode) {\n  \t\tconsole.log('DEVMODE BIATCH');\n      console.log(window.Sniff);\n    }\n\n    //Resets\n    FastClick(this.DOM.body);\n    this.DOM.body.scrollTop = document.documentElement.scrollTop = 0;\n    history.scrollRestoration = 'manual';\n\n    // Create Header\n  \tconst header = new Header(document.querySelector('body > header'));\n\n    //Barba\n    Barba.Dispatcher.on('newPageReady', (currentStatus, oldStatus, container) => {\n\n      // newPageReady\n\n      // Animations\n      if (!window.Sniff.features.mobile) {\n        this.initPrllx(container);\n        this.initInView(container);\n      }\n\n    });\n\n    Barba.Dispatcher.on('linkClicked', (HTMLElement, MouseEvent) => {\n\n      //linkClicked\n\n    })\n\n    Barba.Dispatcher.on('initStateChange', function() {\n\n      //initStateChange\n  \t\tif (typeof ga === 'function') {\n  \t\t\tga('send', 'pageview', location.pathname);\n  \t\t}\n\n  \t});\n\n    var pageTransition = Barba.BaseTransition.extend({\n\n  \t\tstart: function() {\n\n  \t\t  Promise.all([this.newContainerLoading, this.transitionOut()])\n  \t\t  .then(this.transitionIn.bind(this));\n\n  \t\t},\n\n  \t\ttransitionOut: function() {\n\n  \t\t\tlet deferred = Barba.Utils.deferred();\n  \t\t\tlet oldContainer = this.oldContainer;\n\n\t\t\t  const pageOut = new TimelineMax({ paused:true, onComplete:()=>{\n\n          //Close Menu if Open\n          if(header.menuOpen){\n            var click = new Event('click');\n            header.DOM.toggleClose.dispatchEvent(click);\n          }\n\n          window.scrollTo(0,0);\n\t\t\t\t  deferred.resolve();\n\n\t\t\t  }});\n\n        pageOut.to(oldContainer, 0.8, {opacity:0, ease:Power3.easeOut}, 0);\n        pageOut.play();\n\n  \t\t\treturn deferred.promise;\n\n  \t\t},\n\n  \t\ttransitionIn: function() {\n\n  \t\t\tvar _this = this;\n\n  \t\t\tthis.oldContainer.style.display = \"none\";\n  \t\t\tthis.newContainer.style.visibility = 'visible';\n\n\t\t    const pageIn = new TimelineMax({ paused:true, onComplete:()=>{\n\t\t\t\t\t_this.done();\n\t\t\t\t}})\n\n        pageIn.from(this.newContainer, 1.2, {opacity:0, ease:Power3.easeOut}, 0);\n        pageIn.play();\n\n  \t\t}\n\n  \t});\n\n  \tBarba.Pjax.getTransition = function() {\n  \t  return pageTransition;\n  \t};\n\n  \t//routes\n  \tinitHome();\n  \tinitPage();\n\n    Barba.Pjax.start();\n\n  }\n\n  addEvents()Â {\n\n    window.addEventListener('scroll', (e) => {\n  \t\tthis.sy = window.pageYOffset || document.documentElement.scrollTop;\n  \t})\n\n  }\n\n  initPrllx(container) {\n\n\t  const TLPrllxs = []\n\t  const prllxs = container.querySelectorAll('*[data-prllx]');\n\t  prllxs.forEach((item) => {\n\n\t\t    let prllxTL = new TimelineMax({ paused: true});\n        TweenMax.set(item, { y: -1 * item.getAttribute('data-prllx') });\n  \t    prllxTL.to(item, 1, { y:item.getAttribute('data-prllx'), overwrite:\"all\", ease:Power0.easeNone });\n\t\t    TLPrllxs.push(prllxTL);\n\n\t  });\n\n\t  var prllxRender = function (){\n\n\t    prllxs.forEach((item, index) => {\n        let from = item.getBoundingClientRect().top + this.sy - window.innerHeight ;\n\t      let norm = utils.clamp(utils.normalize(this.sy,  from ,  item.getBoundingClientRect().top + this.sy + item.offsetHeight), 0, 1);\n\t\t    TLPrllxs[index].progress(norm);\n\t    });\n\n\t  }\n\n\t  TweenMax.ticker.addEventListener(\"tick\", prllxRender, this, true, 1);\n\n  }\n\n  initInView(container) {\n\n\n    //fadeIn\n    const fadeInElems = container.querySelectorAll('.fadeInView');\n\n    if (fadeInElems) {\n      fadeInElems.forEach((elem) => {\n        elem.fadeInTL = new TimelineMax({ paused: true});\n        elem.fadeInTL.from(elem, 1, {y:80, opacity:0, ease:Power3.easeOut}, 0);\n      })\n\n      inView(\"main .fadeInView\").on('enter', el => {\n        if(!el.done)  el.fadeInTL.duration(animationDuration).play();\n      }).on('exit', el => {\n        el.done = true;\n        //el.fadeInTL.duration(0.2).reverse();\n      });\n\n    }\n\n    //letterIn\n    const lettersInElems = container.querySelectorAll('.lettersInView');\n    if (lettersInElems) {\n\n      lettersInElems.forEach((elem) => {\n        elem.splitLetters = new SplitText(elem, {type:\"chars\"});\n        elem.lettersInTL = new TimelineMax({ paused: true});\n        elem.lettersInTL.staggerFrom(elem.splitLetters.chars, 1, {y:20, opacity:0, ease:Power3.easeOut}, 0.015, 0);\n      })\n\n      inView(\"main .lettersInView\").on('enter', el => {\n        if(!el.done)  el.lettersInTL.duration(animationDuration).play();\n      }).on('exit', el => {\n        el.done = true;\n        el.innerHTML = el.splitLetters._originals;\n        //el.lettersInTL.duration(0.2).reverse();\n      });\n\n    }\n\n    //linesIn\n    const linesInElems = container.querySelectorAll('.linesInView');\n    if (linesInElems) {\n\n      linesInElems.forEach((elem) => {\n        elem.splitLines = new SplitText(elem, {type:\"lines\"});\n        elem.linesInTL = new TimelineMax({ paused: true});\n        elem.linesInTL.staggerFrom(elem.splitLines.lines, 1, {y:20, opacity:0, ease:Power3.easeOut}, 0.05, 0.2);\n      })\n\n      inView(\"main .linesInView\").on('enter', el => {\n        if(!el.done)  el.linesInTL.duration(animationDuration * 1.5).play();\n      }).on('exit', el => {\n        el.done = true;\n        el.innerHTML = el.splitLines._originals;\n        //el.linesInTL.duration(0.2).reverse();\n      });\n\n    }\n\n    inView.offset({\n        top: -120,\n        left:-50,\n        right:-50,\n        bottom: 0,\n    });\n\n  }\n\n  intro() {\n\n    const intro = new TimelineMax({ paused:true, onStart:()=>{\n      this.DOM.body.classList.remove('is-loading');\n    }})\n\n    intro.from(this.DOM.body, 1.2, {opacity:0, ease:Power3.easeOut}, 0.3)\n    intro.play();\n\n  }\n\n}\n\nconst app = new App();\n"],"names":["normalize","value","min","max","clamp","initHome","Barba","BaseView","extend","init","initPage","FastClick","layer","options","oldOnClick","trackingClick","trackingClickStart","targetElement","touchStartX","touchStartY","lastTouchIdentifier","touchBoundary","tapDelay","tapTimeout","notNeeded","methods","context","this","i","l","length","method","apply","arguments","bind","deviceIsAndroid","addEventListener","onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","Event","prototype","stopImmediatePropagation","removeEventListener","type","callback","capture","rmv","Node","call","hijacked","adv","event","propagationStopped","onclick","deviceIsWindowsPhone","navigator","userAgent","indexOf","deviceIsIOS","test","deviceIsIOS4","deviceIsIOSWithBadTarget","deviceIsBlackBerry10","needsClick","target","nodeName","toLowerCase","disabled","className","needsFocus","readOnly","sendClick","clickEvent","touch","document","activeElement","blur","changedTouches","createEvent","initMouseEvent","determineEventType","window","screenX","screenY","clientX","clientY","forwardedTouchEvent","dispatchEvent","tagName","focus","setSelectionRange","updateScrollParent","scrollParent","parentElement","fastClickScrollParent","contains","scrollHeight","offsetHeight","fastClickLastScrollTop","scrollTop","getTargetElementFromEventTarget","eventTarget","nodeType","TEXT_NODE","parentNode","selection","targetTouches","getSelection","rangeCount","isCollapsed","identifier","preventDefault","timeStamp","pageX","pageY","lastClickTime","touchHasMoved","boundary","Math","abs","findControl","labelElement","undefined","control","htmlFor","getElementById","querySelector","forElement","targetTagName","cancelNextClick","elementFromPoint","pageXOffset","pageYOffset","top","cancelable","stopPropagation","permitted","detail","destroy","metaViewport","chromeVersion","blackberryVersion","ontouchstart","exec","content","documentElement","scrollWidth","outerWidth","match","style","msTouchAction","touchAction","attach","module","exports","Header","el","DOM","body","brand","toggleOpen","toggleClose","menuContainer","menuOpen","menuOpenTL","TimelineMax","paused","e","classList","toggle","_this","overflow","visibility","totalDuration","restart","reverse","querySelectorAll","forEach","elem","remove","currentTarget","add","sy","devMode","footer","barbaWrapper","scrollTo","log","console","addEvents","intro","Sniff","scrollRestoration","header","Dispatcher","on","currentStatus","oldStatus","container","features","mobile","initPrllx","initInView","HTMLElement","MouseEvent","ga","location","pathname","pageTransition","BaseTransition","all","newContainerLoading","transitionOut","then","transitionIn","deferred","Utils","oldContainer","pageOut","onComplete","click","resolve","to","opacity","ease","Power3","easeOut","play","promise","display","newContainer","pageIn","done","from","Pjax","getTransition","start","TLPrllxs","prllxs","item","prllxTL","set","y","getAttribute","overwrite","Power0","easeNone","push","ticker","index","getBoundingClientRect","_this4","innerHeight","norm","utils","progress","fadeInElems","fadeInTL","duration","animationDuration","lettersInElems","splitLetters","SplitText","lettersInTL","staggerFrom","chars","innerHTML","_originals","linesInElems","splitLines","linesInTL","lines","offset","onStart"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}